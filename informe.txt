Pablo Hernández Martínez - pablo.hernandez.martinez@udc.es 
Iván Moure Pérez - i.moure@udc.es

-----Informe Práctica 4 Algoritmos-----
Esta práctica consiste en implementar el algoritmo de Dijkstra mediante el
pseudocódigo que nos ha sido dado, validar que la implementación funcione 
correctamente (usando los datos que se proporcionan en las figuras 1 y 2), y por
último calcular empíricamente la complejidad computacional del algoritmo para el 
cálculo de las distancias mínimas (para grafos completos no dirigidos, con pesos
entre 1 y 1000)

-----Especificaciones de la máquina-----
Procesador: Intel® Core™ i7-1195G7 2.9GHz 
Memoria RAM: 16GB 
Sistema operativo: Windows 11 Home 64 bits 
Versión de Python: 3.10.5 64-bit

-----Ejercicio 1-----
El ejercicio 1 se trataba de implementar en Python el algoritmo de Dijkstra
utilizando como base el pseudocódigo proporcionado. Hemos decidido utilizar
arrays de la librería Numpy en vez de listas de Python, ya que estos objetos
disponen de muchos métodos útiles para la implementación, y que las operaciones
con dichos arrays son significativamente más rápidas.

-----Ejercicio 2-----
El ejercicio 2 trata de validar que la implementación funcionase correctamente.
Utilizando los datos que se mostraban en las figuras 1 y 2 se del enunciado.
Adjuntamos un ejemplo de ejecución:

> **** Ejercicio 2****
> +------------------------------------------------------------+
> |                       Primer ejemplo                       |
> +-----------------+--------------+--------------+------------+
> | Matriz original |   Solución   |  Resultado   | ¿Funciona? |
> +-----------------+--------------+--------------+------------+
> |    [0 1 8 4 7]  |  [0 1 3 4 6] |  [0 1 3 4 6] |     ✓      |
> |    [1 0 2 6 5]  |  [1 0 2 5 5] |  [1 0 2 5 5] |            |
> |    [8 2 0 9 5]  |  [3 2 0 7 5] |  [3 2 0 7 5] |            |
> |    [4 6 9 0 3]  |  [4 5 7 0 3] |  [4 5 7 0 3] |            |
> |    [7 5 5 3 0]  |  [6 5 5 3 0] |  [6 5 5 3 0] |            |
> +-----------------+--------------+--------------+------------+
> +--------------------------------------------------------+
> |                    Segundo ejemplo                     |
> +-----------------+------------+------------+------------+
> | Matriz original |  Solución  | Resultado  | ¿Funciona? |
> +-----------------+------------+------------+------------+
> |     [0 1 4 7]   |  [0 1 3 6] |  [0 1 3 6] |     ✓      |
> |     [1 0 2 8]   |  [1 0 2 5] |  [1 0 2 5] |            |
> |     [4 2 0 3]   |  [3 2 0 3] |  [3 2 0 3] |            |
> |     [7 8 3 0]   |  [6 5 3 0] |  [6 5 3 0] |            |
> +-----------------+------------+------------+------------+

-----Ejercicio 3-----
El ejercicio 3 trataba de calcular empíricamente la complejidad computacional
del algoritmo para el cálculo de las distancias mínimas. Generar los grafos
completos no dirigidos con pesos aleatorios entre 1 y 1000; con la posibilidad 
de usar uno de los dos códigos propuestos en la figura 3.

En este caso, hemos utilizado n**2.75 como cota subestimada, n**3 como cota 
ajustada y n**3.25 como cota sobreestimada.

Podemos deducir que en la tabla, la cota ajustada tiende a la constante
400. Este sería un ejemplo de ejecución:

> **** Ejercicio 3****
> +------------------------------------------------------------+
> |      Matrices de adyacencia aleatorias con n vértices      |
> +-----+------------+--------------+-----------+--------------+
> |   n |   t(n)(ns) | t(n)/n**2.75 | t(n)/n**3 | t(n)/n**3.25 |
> +-----+------------+--------------+-----------+--------------+
> |   8 |     556800 |      1828.95 |   1087.50 |       646.63 | ┐
> |  16 |    3013500 |      1471.44 |    735.72 |       367.86 | | Estos valores
> |  32 |   18542100 |      1345.85 |    565.86 |       237.91 | | son anómalos
> |  64 |  123939600 |      1337.26 |    472.79 |       167.16 | ┘
> | 128 |  875431300 |      1404.09 |    417.44 |       124.11 | 
> | 256 | 6699839900 |      1597.37 |    399.34 |        99.84 |
> +-----+------------+--------------+-----------+--------------+

-----Tiempos medidos en bucles-----
En el caso de haber obtenido valores temporales que no hubiesen cumplido con el
umbral de confianza, habríamos iterado 100 veces el cálculo para recibir un 
resultado más preciso. En este caso, no hemos obtenido valores por debajo del
umbral.

-----Mediciones anómalas-----
Los valores que hemos obtenido que considerábamos anómalos están indicados en la
tabla del ejercicio 3. Es muy probable que estas anomalías se deban a que n toma
valores demasiado bajos como para obtener medidas fiables. No hemos obtenido
valores negativos.

-----Conclusiones-----
En esta práctica hemos deducido empíricamente la complejidad del algoritmo de
Dijkstra para una matriz de adyacencia de un grafo completo no dirigido con
aristas ponderadas con pesos positivos (ya que el algoritmo no funcionaría con
pesos negativos). Dicha complejidad parece O(n^3), ya que al dividir el tiempo
por dicha cota ajustada observamos que los valores tienden a una constante de 
400. Esto tiene mucho sentido, ya que la implementación utiliza un bucle anidado
dentro de otro bucle dentro de otro bucle, y cada uno de ellos recorre
aproximadamente n vértices.